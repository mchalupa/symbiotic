#!/usr/bin/env python
#
#  -- Symbiotic tool --
#      2015 - 2018
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import sys
import os
import getopt
from time import time

# set path to our package
pth = os.path.join(os.path.dirname(__file__), '../lib/symbioticpy')
sys.path.append(os.path.abspath(pth))

from symbiotic.utils import err, dbg, enable_debug
from symbiotic.utils.utils import print_stdout, print_stderr, get_symbiotic_dir, process_grep
from symbiotic.utils.watch import ProcessWatch
from symbiotic.utils.timeout import Timeout, start_timeout, stop_timeout
from symbiotic.utils.process import ProcessRunner
from symbiotic import SymbioticException, Symbiotic
from symbiotic.options import SymbioticOptions
from symbiotic.witnesses.witnesses import GraphMLWriter

from subprocess import call

VERSION='5.0.0'
try:
    from symbiotic.versions import versions
except ImportError:
    versions = {
        'symbiotic' : VERSION
    }

usage_msg = """
Usage: symbiotic OPTS sources

where OPTS can be following:

    --bc                      Given file is a bytecode
    --32                      Use 32-bit environment
    --timeout=t               Set timeout to t seconds
    --no-slice                Do not slice the code
    --no-prepare              Do not prepare the code
    --tool=name               Use the tool 'name'. Default is KLEE, other tools that
                              can be integrated are Ceagle, Skink and SMACK
    --explicit-symbolic       Do not make all memory symbolic (in prepare phase),
                              but rely on calls to __VERIFIER_nondet_*
    --undefined-retval-nosym  Do not make return value of undefined functions symbolic,
                              but replace it with 0.
    --malloc-never-fails      Suppose malloc and calloc never return NULL
    --undefined-are-pure      Suppose that undefined functions have no side-effects
    --require-slicer          Abort if slicing fails (default is to use the original file)
    --no-verification         Do not run verification phase (handy for debugging)
    --optimize=opt1,...       Run optimizations, every item in the optimizations list
                              is a string of type when-level, where when is 'before'
                              or 'after' (slicing) and level in 'conservative', 'klee',
                              'O2, 'O3'. A special value is 'none', which
                              disables optimizations (same as --no-optimize).
                              You can also pass optimizations directly to LLVM's opt,
                              by providing a string when-opt-what, e.g. before-opt-iconstprop
    --no-optimize             Don't optimize the code (same as --optimize=none)
    --libc=klee               Link klee-libc.bc to the module
    --slicing-criterion=C     Slice to slicing criterion (function call-sites) 'C'
                              (default is '__assert_fail')
    --repeat-slicing=N        Repeat slicing N times
    --prp=property            Specify property that should hold. It is either LTL formula
                              as specivied by SV-COMP, or one of following shortcuts:
                                null-deref      -- program is free of null-dereferences
                                valid-deref     -- all dereferences are valid
                                valid-free      -- all free() calls are valid
                                valid-memtrack  -- all memory is freed
                                memsafety       -- valid-deref + valid-free
                                                   + valid-memtrack
                                undefined-behavior -- check for undefined behaviour
                                  or undef-behavior
                                signed-overflow -- check for signed integer overflow
                              The string can be given on line or in a file.
    --memsafety-config-file   Set the configuration file for memsafety. The files
                              can be found in share/sbt-instrumentation/memsafety/
    --pta=[fs|fi|old]         Use flow-sensitive/flow-insensitive or old
                              (flow-insensitive too) points-to analysis when slicing.
                              Default is the old
    --debug=what              Print debug messages, what can be comma separated list of:
                              all, compile, prepare, slicer
                              In that case you get verbose output. You can just use
                              --debug= to print basic messages.
    --output=FILE             Store the final code (that is to be run by a tool) to FILE
    --witness=FILE            Store witness into FILE (default is witness.graphml)
    --witness-with-source-lines
                              Store source lines into the witness (may have memory overhead).
    --cflags=flags
    --cppflags=flags          Append extra CFLAGS and CPPFLAGS to use while compiling,
                              the environment CFLAGS and CPPFLAGS are used too
    --slicer-params=STR       Pass parameters directly to slicer
    --verifier-params=STR     Pass parameters directly to the verifier
    --save-files              Do not remove working files after running.
                              The files will be stored in the symbiotic_files directory.
    --no-libc                 Do not link missing functions from libc to the module
    --no-posix                Do not link missing posix functions
                              for which we have definition (default=off).
    --no-kernel               Do not link missing kernel functions for which we have
                              definition (default=off)
    --no-witness              Do not create a witness
    --no-verifier-funs        Do not link __VERIFIER_* function definitions (default=off)
    --dont-exit-on-error      Do not exit when the property violation is reached,
                              but continue searching
    --help                    Show help message
    --version                 Return version
    --version-short           Return version as one-line string
    --no-integrity-check      Does not run integrity check. For development only.
    --dump-env                Only dump environment variables (for debugging)

    One (and only one) of the sources must contain 'main' function
"""

supported_properties = {
    'CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )' : 'REACHCALL',
    'CHECK( init(main()), LTL(G valid-free) )'                 : 'VALID-FREE',
    'CHECK( init(main()), LTL(G valid-deref) )'                : 'VALID-DEREF',
    'CHECK( init(main()), LTL(G valid-memtrack) )'             : 'MEM-TRACK',
    'CHECK( init(main()), LTL(G ! overflow) )'                 : 'SIGNED-OVERFLOW',
    'CHECK( init(main()), LTL(G def-behavior) )'               : 'UNDEF-BEHAVIOR',
    'valid-deref'                                              : 'VALID-DEREF',
    'valid-free'                                               : 'VALID-FREE',
    'valid-memtrack'                                           : 'MEM-TRACK',
    'null-deref'                                               : 'NULL-DEREF',
    'undefined-behavior'                                       : 'UNDEF-BEHAVIOR',
    'undef-behavior'                                           : 'UNDEF-BEHAVIOR',
    'signed-overflow'                                          : 'SIGNED-OVERFLOW',
    'memsafety'                                                : 'MEMSAFETY',
}

# whether to dump source lines into the witness
witness_with_source_lines = False
no_witness = False
no_integrity_check = False
dump_env_only = False

def _get_include_paths(cmd):
    """
    Find paths where standard headers are located
    """
    paths=[]

    pr = ProcessRunner(cmd, ProcessWatch(lines_limit = None))
    if pr.run() == 0:
        lines_iter = iter(pr.getOutput())
        # find the beginning of include paths
        for line in lines_iter:
            if line == b'#include <...> search starts here:\n':
                break

        for line in lines_iter:
            line = line.decode('ascii').strip()
            if line == 'End of search list.':
                break
            else:
                paths.append(line)

    return paths

def get_cpp_include_paths():
    cmd = ['cpp', '-xc', '-v', '/dev/null']
    return _get_include_paths(cmd)

def get_clang_include_paths():
    cmd = ['clang', '-E', '-xc', '-v', '/dev/null']
    return _get_include_paths(cmd)

def dump_paths(fun = print_stdout):
    variables = ['PATH', 'LD_LIBRARY_PATH', 'C_INCLUDE_DIR', 'CFLAGS', 'CPPFLAGS']
    for v in variables:
        if v in os.environ:
            fun('{0}={1}'.format(v, os.environ[v]))

def set_environ(tool, is32bit = False):
    def prepend(env, what):
        if env in os.environ:
            newenv = '{0}:{1}'.format(what, os.environ[env])
        else:
            newenv = what

        os.environ[env] = newenv

    # do this before we override PATH - we need 'find' utility
    #additional_paths = get_clang_include_paths()
    #if not additional_paths:
    #    additional_paths = get_cpp_include_paths()
    #for p in additional_paths:
    #    prepend('C_INCLUDE_DIR', p)

    symbiotic_dir = get_symbiotic_dir()
    # check whether we are in distribution directory or in the developement directory
    if os.path.isfile('{0}/build.sh'.format(symbiotic_dir)):
        devel_env = True
    else:
        devel_env = False

    llvm_version=tool.llvm_version()

    prepend('LD_LIBRARY_PATH', '{0}/lib'.format(symbiotic_dir))
    prepend('LD_LIBRARY_PATH', '{0}/llvm-{1}/lib'.format(symbiotic_dir, llvm_version))

    if devel_env:
        prepend('LD_LIBRARY_PATH', '{0}/src'.format(symbiotic_dir))

    prepend('C_INCLUDE_DIR', '{0}/include'.format(symbiotic_dir))
    prepend('C_INCLUDE_DIR', '{0}/llvm-{1}/include'.format(symbiotic_dir, llvm_version))

    assert tool.name() == 'klee'

    # override the path completely, we want to be sure that we use only our binaries
    if devel_env:
        os.environ['PATH'] = '{0}/llvm-{1}/build/bin:{0}/bin'.format(symbiotic_dir, llvm_version)
        prepend('PATH', '{0}/dg/tools'.format(symbiotic_dir))
        prepend('PATH', '{0}/sbt-instrumentation/src'.format(symbiotic_dir))
        prepend('PATH', '{0}/klee-build/bin'.format(symbiotic_dir))

        # XXX no KLEE_RUNTIME_LIBRARY_PATH 
    else:
        os.environ['PATH'] = '{0}/llvm-{1}/bin:{0}/bin'.format(symbiotic_dir, llvm_version)

        if is32bit:
            os.environ['KLEE_RUNTIME_LIBRARY_PATH'] \
                = '{0}/llvm-{1}/lib32/klee/runtime'.format(symbiotic_dir, llvm_version)
        else:
            os.environ['KLEE_RUNTIME_LIBRARY_PATH'] \
                = '{0}/llvm-{1}/lib/klee/runtime'.format(symbiotic_dir, llvm_version)

    dbg('Symbiotic dir: {0}'.format(symbiotic_dir))
    dump_paths(dbg)

    return symbiotic_dir

def parse_environ(opts):
    """
    Parse environment variables of interest and
    change running options accordingly
    """
    if 'C_INCLUDE_DIR' in os.environ:
        for p in os.environ['C_INCLUDE_DIR'].split(':'):
            opts.CPPFLAGS.append('-I{0}'.format(p))

    if 'CFLAGS' in os.environ:
        opts.CFLAGS += os.environ['CFLAGS'].split(' ')
    if 'CPPFLAGS' in os.environ:
        opts.CPPFLAGS += os.environ['CPPFLAGS'].split(' ')

def generate_graphml(path, source, prps, is32bit, is_correctness_wit, saveto):
    if saveto is None:
        saveto = '{0}.graphml'.format(os.path.basename(path))
        saveto = os.path.abspath(saveto)

    gen = GraphMLWriter(source, prps, is32bit, is_correctness_wit, witness_with_source_lines)
    if not is_correctness_wit:
        gen.parseError(path, source)
    else:
        assert path is None
    gen.write(saveto)

def generate_counterexample(bindir, sources, prps, is32bit, is_correctness_wit, saveto = None):
    assert len(sources) == 1 and "Can not generate witnesses for more sources yet"
    print('Generating witness: {0}'.format(saveto))
    if is_correctness_wit:
        generate_graphml(None, sources[0], prps, is32bit, is_correctness_wit, saveto)
        return

    abd = os.path.abspath(bindir)
    for path in os.listdir('{0}/klee-last'.format(abd)):
        if 'assert' in path:
            pth = os.path.abspath('{0}/klee-last/{1}.path'.format(abd, path[:-11]))
            generate_graphml(pth, sources[0], prps, is32bit, is_correctness_wit, saveto)
            break

def get_prp(prp):
    # if property is given in file, read the file
    epath = os.path.expanduser(prp)
    if os.path.isfile(epath):
        prp_list = []
        f = open(epath, 'r')
        for line in f.readlines():
            line = line.strip()
            # ignore empty lines
            if line:
                prp_list.append(line)
        f.close()
        #pf = '{0}PropertyUnreachCall.prp'.format(epath[:epath.rfind('Property')])
        pf = epath
        return (prp_list, os.path.abspath(pf))

    # it is not a file, so it is given as a string
    # FIXME: this does not work for properties given
    # as LTL (there are spaces)
    return (prp.split(), None)

# do not remove working files after running
save_files = False

def print_short_vers():
    vers = '{0}-'.format(VERSION)
    n = 0
    for (k, v) in versions.items():
        if n > 0:
            vers += '-'
        vers += k + ':' + v[:8]
        n += 1

    print(vers)


def parse_command_line():
    options = SymbioticOptions()

    try:
        opts, args = getopt.getopt(sys.argv[1:], '',
                                   ['no-slice', '32', 'prp=', 'no-optimize',
                                    'debug=', 'timeout=', 'version', 'help',
                                    'libc=', 'old-slicer', 'require-slicer',
                                    'no-verification', 'output=', 'witness=', 'bc',
                                    'optimize=', 'no-prepare', 'malloc-never-fails',
                                    'pta=', 'no-libc', 'slicing-criterion=',
                                    'cflags=', 'cppflags=', 'link=', 'verifier=',
                                    'no-link-undefined', 'repeat-slicing=',
                                    'slicer-params=', 'verifier-params=',
                                    'explicit-symbolic', 'undefined-retval-nosym',
                                    'save-files', 'version-short', 'no-posix',
                                    'no-kernel', 'no-verifier-funs', 'no-witness',
                                    'witness-with-source-lines', 'dont-exit-on-error',
                                    'undefined-are-pure',
                                    'no-integrity-check', 'dump-env',
                                    'memsafety-config-file='])
                                   # add klee-params
    except getopt.GetoptError as e:
        err('{0}'.format(str(e)))

    for opt, arg in opts:
        if opt == '--help':
            print(usage_msg)
            sys.exit(0)
        elif opt == '--debug':
            enable_debug(arg.split(','))
        elif opt == '--verifier':
            options.tool_name = arg
        elif opt == '--libc':
             if arg == 'klee':
                 options.add_libc = True
             else:
                 print('Unknown libc')
                 sys.exit(0)
        elif opt == '--version-short':
            print_short_vers()
            sys.exit(0)
        elif opt == '--version':
            print('version: {0}'.format(VERSION))
            for (k, v) in versions.items():
                print('{0:<20} -> {1}'.format(k, v))
            sys.exit(0)
        elif opt == '--no-slice':
            dbg('Will not slice')
            options.noslice = True
        elif opt == '--no-witness':
            dbg('Will not create a witness')
            global no_witness
            no_witness = True
        elif opt == '--no-prepare':
            dbg('Will not prepare code')
            options.noprepare = True
        elif opt == '--explicit-symbolic':
            options.explicit_symbolic = True
        elif opt == '--undefined-retval-nosym':
            options.undef_retval_nosym = True
        elif opt == '--no-link-undefined':
            dbg('Will not try to find and link undefined functions')
            options.nolinkundef = True
        elif opt == '--malloc-never-fails':
            dbg('Assuming malloc and calloc will never fail')
            options.malloc_never_fails = True
        elif opt == '--undefined-are-pure':
            dbg('Assuming that undefined functions are pure')
            options.undefined_are_pure = True
        elif opt == '--no-verification':
            dbg('Will not run verification phase')
            options.no_verification = True
        elif opt == '--require-slicer':
            options.require_slicer = True
        elif opt == '--old-slicer':
            dbg('Will use old slicer')
            options.old_slicer = True
        elif opt == '--32':
            dbg('Will use 32-bit environment')
            options.is32bit = True
        elif opt == '--no-optimize':
            dbg('Will not optimize the code')
            options.no_optimize = True
        elif opt == '--optimize':
            dbg('Optimization levels: ' + arg)
            options.optlevel = arg.split(',')
            for o in options.optlevel:
                o = o.strip()
                if o == "none":
                    options.no_optimize = True
                    options.optlevel = []
                    break
        elif opt == '--prp':
            options.orig_prp, options.prpfile = get_prp(arg)
            for prp in options.orig_prp:
                dbg('Property: {0}'.format(prp))
        elif opt == '--pta':
            options.slicer_pta = arg
            if not arg in ['fs', 'fi', 'old']:
                err('Points-to analysis can be one of: fs, fi, old')

            dbg('Points-to: {0}'.format(arg))
        elif opt == '--slicing-criterion':
            options.slicing_criterion = arg
            dbg('Slicing criterion: {0}'.format(arg))
        elif opt == '--repeat-slicing':
            try:
                options.repeat_slicing = int(arg)
            except ValueError:
                err('Invalid argument for --repeat-slicing')
            dbg('Will repeat slicing {0} times'.format(arg))
        elif opt == '--timeout':
            try:
                options.timeout = int(arg)
            except ValueError:
                err('Invalid numerical argument for timeout: {0}'.format(arg))
            dbg('Timeout set to {0} sec'.format(arg))
        elif opt == '--output':
            options.final_output = arg
            dbg('Output will be stored to {0}'.format(arg))
        elif opt == '--witness':
            options.witness_output = os.path.expanduser(arg)
            options.witness_output = os.path.abspath(options.witness_output)
            dbg('Witness will be stored to {0}'.format(arg))
        elif opt == '--bc':
            options.source_is_bc = True
            dbg('Given code is bytecode')
        elif opt == '--cflags':
            global CFLAGS
            options.CFLAGS += arg.split()
        elif opt == '--cppflags':
            global CPPFLAGS
            options.CPPFLAGS += arg.split()
        elif opt == '--slicer-params':
            options.slicer_params = arg.split()
        elif opt == '--verifier-params':
            options.tool_params = arg.split()
        elif opt == '--link':
            options.link_files += arg.split(',')
        elif opt == '--save-files':
            global save_files
            save_files = True
        elif opt == '--no-posix':
            remove_linkundef(options, 'posix')
        elif opt == '--no-kernel':
            remove_linkundef(options, 'kernel')
        elif opt == '--no-verifier-funs':
            remove_linkundef(options, 'verifier')
        elif opt == '--no-libc':
            remove_linkundef(options, 'libc')
        elif opt == '--witness-with-source-lines':
            global witness_with_source_lines
            witness_with_source_lines = True
        elif opt == '--dont-exit-on-error':
            options.dont_exit_on_error = True
        elif opt == '--memsafety-config-file':
            options.memsafety_config_file = arg
        elif opt == '--dump-env':
            global dump_env_only
            dump_env_only = True
        elif opt == '--no-integrity-check':
            global no_integrity_check
            no_integrity_check = True

    return options, args
def on_rm_error(func, pth, exc):
    dbg('Failed removing tmp dir: {0})'.format(str(exc[1])))

def rm_tmp_dir(d, force = False):
    if save_files and not force:
        return

    from shutil import rmtree
    rmtree(d, onerror=on_rm_error)

def copy_sources_to_tmp(sources):
    """
    Create temporary directory and copy sources there.
    Returns the new paths to sources
    """

    from tempfile import mkdtemp
    from shutil import copy

    if save_files:
        tmpdir = 'symbiotic_files'
        try:
            os.mkdir(tmpdir)
        except OSError:
            rm_tmp_dir(tmpdir, True)
            os.mkdir(tmpdir)
    else:
        if os.path.isdir('/tmp'):
            prefix = '/tmp/symbiotic-'
        else:
            dbg('Found no /tmp dir, falling-back to curdir: {0}'.format(os.getcwd()))
            prefix = 'symbiotic-'

        tmpdir = mkdtemp(prefix=prefix, dir='.')

    for s in sources:
        t = os.path.join(tmpdir, os.path.basename(s))
        target = os.path.abspath(t)
        try:
            copy(s, target)
        except IOError as e:
            rm_tmp_dir(tmpdir, True)
            err('Failed copying sources to a tmp directory: {0}'.format(str(e)))

    return tmpdir

def dump_error(bindir):
    abd = os.path.abspath(bindir)
    pth = os.path.abspath('{0}/klee-last/test000001.assert.err'.format(abd))
    try:
        f = open(pth, 'r')
        print('\n --- Error trace ---\n')
        for line in f:
            print_stdout(line, print_nl = False)
        print('\n --- ----------- ---')
    except OSError:
        # this dumping is just for convenience,
        # so do not return any error
        dbg('Failed dumping the error')

def remove_linkundef(options, what):
    try:
        options.linkundef.remove(what)
    except ValueError:
        pass


def initialize_tool(opts):
    opts.slicing_criterion = '__VERIFIER_error,__assert_fail'
    remove_linkundef(opts, 'verifier')
    opts.explicit_symbolic = True

    if opts.tool_name == 'klee':
        opts.explicit_symbolic = False
        from symbiotic.tools.klee import Tool
        return Tool(opts)
    elif opts.tool_name == 'ceagle':
        from symbiotic.tools.ceagle import Tool
        return Tool()
    elif opts.tool_name == 'skink':
        from symbiotic.tools.skink import Tool
        return Tool()
    elif opts.tool_name == 'smack':
        from symbiotic.tools.smack import Tool
        return Tool()
    elif opts.tool_name == 'seahorn':
        from symbiotic.tools.seahorn import Tool
        return Tool()
    else:
        raise SymbioticException('Unknown tool: {0}'.format(opts.tool_name))

if __name__ == "__main__":
    # store time when we have started, so that we can
    # measure how long Symbiotic ran
    start_time = time()

    opts, args = parse_command_line()
    if len(args) < 1:
        if dump_env_only:
            tool = initialize_tool(opts)
            parse_environ(opts)
            set_environ(tool, opts.is32bit)
            dump_paths()
            sys.exit(0)
        else:
            print(usage_msg)
            sys.exit(1)

    print_short_vers()
    try:
        # opts.orig_prp now contain a list with keys (or None),
        # but we want the values from the map
        if opts.orig_prp:
            for prp in opts.orig_prp:
                prp_key = supported_properties[prp]
                opts.prp.append(prp_key)
    except KeyError as ke:
        print('Unknown or unsupported property: {0}'.format(ke.message))
        print('RESULT: unknown')
        sys.exit(0)

    sources = args
    if opts.source_is_bc and len(sources) != 1:
        err('Bytecode must be only one file')

    if opts.timeout != 0:
        start_timeout(opts.timeout)

    tool = initialize_tool(opts)

    try:
        symbiotic = None

        # set environment. That is set PATH and LD_LIBRARY_PATH
        # and so on
        symbiotic_dir = set_environ(tool, opts.is32bit)
        # this calls the tools, so it must be after setting the environ
        if not no_integrity_check:
            from symbiotic.integritycheck import IntegrityChecker

            try:
                checker = IntegrityChecker(versions)
                checker.check();
            except SymbioticException as e:
                err('{0}\nIf you are aware of this, you may use --no-integrity-check to suppress this error'.format(str(e)))

        # set CFLAGS and CPPFLAGS for compilation
        parse_environ(opts)

        # save original sources for later use
        original_sources = []
        for s in sources:
            original_sources.append(os.path.abspath(s))

        working_dir = copy_sources_to_tmp(sources)
        os.chdir(working_dir)
        dbg('Working directory: {0}'.format(working_dir))

        from symbiotic.filetransform import InlineRemove, NondetSimplify, InfiniteLoopsRemover #, ReplaceNamedNondet
        transformations = [InlineRemove(), NondetSimplify(),
                           #ReplaceNamedNondet(),
                           InfiniteLoopsRemover()]
        for trans in transformations:
            # remove __inline from the source
            new_sources = []
            for s in sources:
                # we changed directory to our tmpdir,
                # so now the sources have only basenames
                s = os.path.basename(s)
                new_s = '{0}-trans.c'.format(s)
                trans.run(s, new_s)
                # move the temporary file to the original file
                os.rename(new_s, s)
                # we renamed the sources to be in the temporary directory,
                # so we must update the names
                new_sources.append(s)

            assert len(sources) == len(new_sources)
            sources = new_sources

        # let the show begin!
        try:
            symbiotic = Symbiotic(tool, sources, opts, symbiotic_dir)
            res = symbiotic.run()
        except SymbioticException as e:
            sys.stdout.flush()
            sys.stderr.flush()

            print_stdout('RESULT: ERROR ({0})'.format(str(e)))
            err(' == FAILURE ==\n{0}'.format(str(e)))

        srcdir = os.path.dirname(symbiotic.llvmfile)
        if res is None or tool.name() != 'klee':
            pass
        elif res.startswith('false'):
            dump_error(srcdir)

            if not no_witness:
                generate_counterexample(srcdir, original_sources, opts.orig_prp,
                                        opts.is32bit, False, opts.witness_output)
        elif res == 'true' and not no_witness:
            generate_counterexample(srcdir, original_sources, opts.orig_prp,
                                    opts.is32bit, True, opts.witness_output)
    except Timeout:
        sys.stdout.flush()
        sys.stderr.flush()

        print_stdout('RESULT: timeout')
    finally:
        stop_timeout()
        if symbiotic:
            symbiotic.terminate()
            symbiotic.kill()
            symbiotic.kill_wait()

    os.chdir('..')
    rm_tmp_dir(working_dir)

    # print information about how long Symbiotic ran
    print_stdout('INFO: Total time elapsed: {0}'.format(time() - start_time),
                 color='WHITE')
    sys.exit(0)
